.PHONY: clean requirements upgrade

.DEFAULT_GOAL := help


help: ### Display this help message
	@echo "Please use \`make <target>' where <target> is one of"
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}'

clean: ## Remove generated byte code, coverage reports, and build artifacts
	@echo "--> Clean Python files ..."
	find . -name '__pycache__' -exec rm -rf {} +
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	rm -fr build/
	rm -fr dist/
	rm -fr *.egg-info

	@echo "--> Clean other files ..."
	rm -fr var/
	coverage erase
	@echo "The project has been cleaned successfully."

selfcheck: ## Check that the Makefile is well-formed
	@echo "The Makefile is well-formed."

piptools: ## install pinned version of pip-compile and pip-sync
	pip install -r requirements/pip.txt
	pip install -r requirements/pip-tools.txt

requirements: piptools  ## install test requirements locally
	pip-sync requirements/ci.txt

requirements_python: piptools  ## install all requirements locally
	pip-sync requirements/dev.txt requirements/private.*

quality: ## Run quality tests and checks
	tox -e quality

unit: ## Run unit tests
	tox

pii_check: ## check for PII annotations on all Django models
	tox -e pii_check

test: clean ## run tests in the current virtualenv
	pytest

test-all: unit quality pii_check ## run tests on every supported Python/Django combination

# Define PIP_COMPILE_OPTS=-v to get more information during make upgrade.
PIP_COMPILE = pip-compile --upgrade $(PIP_COMPILE_OPTS)

upgrade: export CUSTOM_COMPILE_COMMAND=make upgrade
upgrade: ## update the requirements/*.txt files with the latest packages satisfying requirements/*.in
	pip install -qr requirements/pip-tools.txt
	# Make sure to compile files after any other files they include!
	$(PIP_COMPILE) --allow-unsafe -o requirements/pip.txt requirements/pip.in
	$(PIP_COMPILE) -o requirements/pip-tools.txt requirements/pip-tools.in
	pip install -qr requirements/pip.txt
	pip install -qr requirements/pip-tools.txt
	$(PIP_COMPILE) -o requirements/base.txt requirements/base.in
	$(PIP_COMPILE) -o requirements/test.txt requirements/test.in
	$(PIP_COMPILE) -o requirements/quality.txt requirements/quality.in
	$(PIP_COMPILE) -o requirements/ci.txt requirements/ci.in
	$(PIP_COMPILE) -o requirements/dev.txt requirements/dev.in
	# Let tox control the Django and bleach[css] version for tests
	sed '/^[dD]jango==/d; /^bleach\[css\]==/d' requirements/test.txt > requirements/test.tmp
	mv requirements/test.tmp requirements/test.txt
